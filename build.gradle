import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
    id "de.undercouch.download" version '4.0.2'
    id "io.github.http-builder-ng.http-plugin" version "0.1.1"
}

repositories {
    mavenCentral()
}

File getJar(Project project) {
    return file(project.projectDir.path + '/build/libs/' + project.name + '-' + project.version + '-all.jar')
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

project.ext {
    mcVersion = '1.19'
    serverPath = project.projectDir.path + '/server'
    citizens_version = '2.0.30-SNAPSHOT'
    we_version = '7.1.0-SNAPSHOT'
}

task download(type: Download) {
    def json = new URL("https://papermc.io/api/v2/projects/paper/versions/${project.ext.mcVersion}/builds").text
    def paper = new JsonSlurper().parseText(json)
    def latest = 0
    for (build in paper.builds) {
        if (build.build > latest) {
            latest = build.build
        }
    }

    src "https://papermc.io/api/v2/projects/paper/" +
            "versions/${project.ext.mcVersion}/builds/${latest}/downloads/paper-${project.ext.mcVersion}-${latest}.jar"
    dest project.ext.serverPath + '/paper.jar'
    overwrite true
}

subprojects {
    def isBaseProject = project.name.charAt(0).isLowerCase()

    group 'com.zhufu.opencraft'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'kotlin'
    if (!isBaseProject)
        apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compileOnly "io.papermc.paper:paper-api:" + rootProject.ext.mcVersion + "-R0.1-SNAPSHOT"
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        compileOnly fileTree(dir: 'lib', includes: ['*.jar'])
    }

    sourceCompatibility = 17

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenCentral()
        maven { url 'https://papermc.io/repo/repository/maven-public/' }
        maven { url 'https://libraries.minecraft.net/' }
        maven { url 'https://repo.citizensnpcs.co/' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
        maven { url 'https://maven.enginehub.org/repo/' }
    }


    if (!isBaseProject) {
        beforeEvaluate {
            copyJar.shouldRunAfter(build)
        }

        def jarName = getJar(project).name

        clean {
            delete(rootProject.ext.serverPath + '/plugins/' + jarName, projectDir.path + '/build', projectDir.path + '/out')
        }

        task copyJar(type: Copy) {
            dependsOn shadowJar
            from getJar(project)?.path ?: project.rootDir.path + '/build/libs/' + jarName
            into project.rootDir.path + '/server/plugins/'
        }
    }

    if (project.name != 'ServerCore') {
        dependencies {
            if (!isBaseProject)
                compileOnly project(':pluginBase')
            compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            compileOnly "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
        }
    }
}

