buildscript {
    ext {
        mcVersion = '1.16.1'
        serverPath = project.projectDir.path + '/server'
        citizens_version = '2.0.27-SNAPSHOT'
        we_version = '7.2.0-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id "de.undercouch.download" version '4.0.2'
}

File getJar(Project project) {
    return file(project.projectDir.path + '/build/libs/' + project.name + '-' + project.version + '.jar')
}

task download(type: Download) {
    src 'https://papermc.io/api/v1/paper/' + mcVersion + '/latest/download'
    dest project.ext.serverPath + '/paper.jar'
    overwrite true
}

allprojects {
    group 'com.zhufu.opencraft'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'kotlin'
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation "com.destroystokyo.paper:paper-api:" + mcVersion + "-R0.1-SNAPSHOT"
        implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.0"
        compileOnly fileTree(dir: 'lib', includes: ['*.jar'])
        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }

    sourceCompatibility = 1.8
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.freeCompilerArgs += '-Xopt-in=kotlin.contracts.ExperimentalContracts'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenCentral()

        maven { url 'https://papermc.io/repo/repository/maven-public/' }
        maven { url 'https://libraries.minecraft.net/' }
        maven { url 'http://repo.citizensnpcs.co/' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
        maven { url 'http://maven.enginehub.org/repo/' }
    }

    if (project.name.charAt(0).isUpperCase() && project != rootProject) {
        beforeEvaluate {
            copyJar.shouldRunAfter(build)
        }

        def jarName = getJar(project).name

        jar {
            from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        }
        clean {
            delete(rootProject.ext.serverPath + '/plugins/' + jarName, projectDir.path + '/build', projectDir.path + '/out')
        }

        task copyJar(type: Copy) {
            dependsOn build
            from getJar(project)?.path ?: project.rootDir.path + '/build/libs/' + jarName
            into project.rootDir.path + '/server/plugins/'
        }

        dependencies {
            compile project(':pluginBase')
        }
    }
}

